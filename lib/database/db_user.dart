import 'package:msport/model/bookings.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:msport/model/user.dart';

class DBUser {
  final SupabaseClient _supabase = Supabase.instance.client;
  static const String _tableName = 'users';

  // CREATE - Add new user
  Future<User1?> createUser(User1 user) async {
    try {
      final response = await _supabase
          .from(_tableName)
          .insert(user.toMap())
          .select()
          .single();

      return User1.fromMap(response);
    } catch (e) {
      print('Error creating user: $e');
      return null;
    }
  }

  // CREATE - bookings
  Future<Booking> createBooking(Booking booking) async {
    try {
      print("üì§ Sending booking to Supabase: ${booking.toJson()}");

      final response = await _supabase
          .from('bookings')
          .insert(booking.toJson())
          .select()
          .single();

      print("‚úÖ Booking created response: $response");

      return Booking.fromJson(response);
    } catch (e) {
      print('‚ùå Error creating booking: $e');

      if (e is PostgrestException) {
        print('Supabase Error Details: ${e.message}');
      }

      throw Exception('Failed to create booking');
    }
  }

  // READ - Get user by ID
  Future<Map<String, dynamic>?> getCurrentUserData() async {
    final supabase = Supabase.instance.client;

    // L·∫•y user t·ª´ Supabase Auth (ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p)
    final user = supabase.auth.currentUser;
    if (user == null) {
      print('Ch∆∞a c√≥ ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p.');
      return null;
    }

    final authId = user.id;

    // Truy v·∫•n th√¥ng tin t·ª´ b·∫£ng "users" theo auth_id
    final response = await supabase
        .from('users')
        .select()
        .eq('auth_id', authId)
        .maybeSingle(); // L·∫•y 1 user (ho·∫∑c null n·∫øu kh√¥ng c√≥)

    if (response == null) {
      print('Kh√¥ng t√¨m th·∫•y th√¥ng tin user v·ªõi auth_id: $authId');
      return null;
    }
    return response;
  }

  // upadate status sport field
  Future<void> updateItemStatusToUnactive(int itemId) async {
    final supabase = Supabase.instance.client;

    try {
      final response = await supabase
          .from('sports_fields')
          .update({'status': 'inactive'})
          .eq('id', itemId)
          .select(); // Supabase SDK m·ªõi y√™u c·∫ßu th√™m .select() ƒë·ªÉ nh·∫≠n l·∫°i d·ªØ li·ªáu

      print('‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng: $response');
    } catch (error) {
      print('‚ùå L·ªói khi c·∫≠p nh·∫≠t: $error');
    }
  }

  //Get booking of user
  Future<Map<String, dynamic>?> getBookingOfUser(int userID) async {
    final supabase = Supabase.instance.client;
    final response = await supabase
        .from('bookings')
        .select()
        .eq('id', userID)
        .maybeSingle(); // L·∫•y 1 user (ho·∫∑c null n·∫øu kh√¥ng c√≥)

    if (response == null) {
      print('Kh√¥ng t√¨m th·∫•y th√¥ng tin user v·ªõi auth_id: $userID');
      return null;
    }
    return response;
  }

  Future<Map<String, dynamic>?> getSportFieldBooked(int idField) async {
    final supabase = Supabase.instance.client;
    final response = await supabase
        .from('sports_fields')
        .select()
        .eq('id', idField)
        .maybeSingle(); // L·∫•y 1 user (ho·∫∑c null n·∫øu kh√¥ng c√≥)

    if (response == null) {
      print('Kh√¥ng t√¨m th·∫•y th√¥ng tin user v·ªõi auth_id: $idField');
      return null;
    }
    return response;
  }

  Future<List<Map<String, dynamic>>> getBookedFieldsByUser(String role) async {
    final user = await DBUser().getCurrentUserData();
    final userId = user?['id'];

    final response = await Supabase.instance.client
        .from('bookings')
        .select('*, sports_fields(*)')
        .eq(role, userId);

    if (response != null && response is List) {
      return List<Map<String, dynamic>>.from(response);
    } else {
      throw Exception('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ƒë·∫∑t s√¢n');
    }
  }

  Future<List<Map<String, dynamic>>> getBookingsByOwner() async {
    final user = await DBUser().getCurrentUserData();
    final userId = user?['id'];
    final response = await Supabase.instance.client
        .from('bookings')
        .select('id, user_id, sports_fields(*)')
        .filter(
          'sports_fields.owner_id',
          'eq',
          userId,
        ); // ch·ªâ l·∫•y s√¢n c·ªßa owner

    if (response != null && response is List) {
      return List<Map<String, dynamic>>.from(response);
    } else {
      throw Exception('Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë·∫∑t s√¢n theo owner');
    }
  }
}
